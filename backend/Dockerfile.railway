# Railway Production Dockerfile - AI Competition Backend
# Build Date: 2025-09-03
# Version: 5.0.0 - COMPLETE BUILD FIX

# Use Node.js 20 Alpine as base image
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Install system dependencies for Tesseract OCR
RUN apk add --no-cache \
    tesseract \
    tesseract-data-eng \
    poppler-utils \
    && rm -rf /var/cache/apk/*

# Copy package files first for better caching
COPY package*.json ./

# Install ALL dependencies (including dev dependencies for build)
# This ensures @nestjs/cli is available for the build command
RUN npm install --no-audit --no-fund

# Copy source code
COPY . .

# Verify that nest CLI is available
RUN npx nest --version

# Build the application (this will work now because @nestjs/cli is installed)
RUN npm run build

# Verify the build output
RUN ls -la dist/

# Production stage
FROM node:20-alpine AS production

# Set working directory
WORKDIR /app

# Install only production system dependencies
RUN apk add --no-cache \
    tesseract \
    tesseract-data-eng \
    poppler-utils \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./

# Install ONLY production dependencies (excludes devDependencies like @nestjs/cli)
RUN npm install --omit=dev --no-audit --no-fund --prefer-offline=false

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/uploads ./uploads

# Create uploads directory if it doesn't exist
RUN mkdir -p uploads

# Set permissions
RUN chmod 755 uploads

# Verify the production build
RUN ls -la dist/

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Start the application
CMD ["npm", "run", "start:prod"]
